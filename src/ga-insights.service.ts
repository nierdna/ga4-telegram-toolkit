import { logger } from "./utils/logger";
import { GA4Service } from "./ga.service";
import { TelegramService } from "./telegram.service";
import * as dotenv from 'dotenv';

dotenv.config();

interface InsightReport {
    title: string;
    data: any;
}

export class GAInsightsService {
    private ga4Service: GA4Service;
    private telegramService: TelegramService;

    constructor() {
        const ga4PropertyId = process.env.GA4_PROPERTY_ID || '489280622';
        this.ga4Service = new GA4Service(ga4PropertyId, 'Apeoff.fun');
        this.telegramService = new TelegramService();
    }

    /**
     * G·ª≠i b√°o c√°o t·ª´ Google Analytics qua Telegram
     */
    async sendDailyGAInsights(): Promise<boolean> {
        try {
            logger.info('ƒêang thu th·∫≠p th√¥ng tin Google Analytics...');

            // Thu th·∫≠p d·ªØ li·ªáu t·ª´ nhi·ªÅu b√°o c√°o GA
            const [
                usersByCountry,
                deviceSessions,
                topPages,
                channelConversions,
                trafficComparison
            ] = await Promise.all([
                this.ga4Service.getUsersByCountry(),
                this.ga4Service.getSessionsByDeviceCategory('yesterday', 'yesterday'),
                this.ga4Service.getPopularPagesWithEngagement('7daysAgo', 'yesterday', 5),
                this.ga4Service.getConversionsBySourceMedium('7daysAgo', 'yesterday', 5),
                this.ga4Service.compareTodayVsYesterday('sessions')
            ]);

            // ƒê·ªãnh d·∫°ng th√¥ng tin
            const formattedMessage = this.formatGAInsightsReport([
                { title: 'üìä Ng∆∞·ªùi d√πng theo qu·ªëc gia (h√¥m qua)', data: usersByCountry },
                { title: 'üì± Phi√™n theo thi·∫øt b·ªã (h√¥m qua)', data: deviceSessions },
                { title: 'üìÑ Trang ph·ªï bi·∫øn (7 ng√†y qua)', data: topPages },
                { title: 'üîÑ Chuy·ªÉn ƒë·ªïi theo ngu·ªìn (7 ng√†y qua)', data: channelConversions },
                { title: 'üìà So s√°nh l∆∞u l∆∞·ª£ng (h√¥m nay vs h√¥m qua)', data: trafficComparison }
            ]);

            // G·ª≠i tin nh·∫Øn
            logger.info('ƒêang g·ª≠i b√°o c√°o Google Analytics qua Telegram...');
            return await this.telegramService.sendMessage(formattedMessage);
        } catch (error) {
            logger.error('L·ªói khi thu th·∫≠p v√† g·ª≠i th√¥ng tin GA:', error);
            await this.telegramService.sendMessage('‚ùå Kh√¥ng th·ªÉ thu th·∫≠p d·ªØ li·ªáu Google Analytics: ' + (error as Error).message);
            return false;
        }
    }

    /**
     * ƒê·ªãnh d·∫°ng b√°o c√°o GA ƒë·ªÉ hi·ªÉn th·ªã tr√™n Telegram
     */
    private formatGAInsightsReport(reports: InsightReport[]): string {
        const currentDate = new Date().toLocaleDateString('vi-VN', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        let message = `<b>üìä B√ÅO C√ÅO GOOGLE ANALYTICS</b>\n`;
        message += `<i>${currentDate}</i>\n`;
        message += `<i>Service: ${this.ga4Service.getName()}</i>\n\n`;

        for (const report of reports) {
            message += `<b>${report.title}</b>\n`;

            if (!report.data || !report.data.data || report.data.data.length === 0) {
                message += '- Kh√¥ng c√≥ d·ªØ li·ªáu\n\n';
                continue;
            }

            // Format d·ªØ li·ªáu t·ª´ng b√°o c√°o
            if (report.title.includes('Ng∆∞·ªùi d√πng theo qu·ªëc gia')) {
                message += this.formatCountryReport(report.data);
            } else if (report.title.includes('Phi√™n theo thi·∫øt b·ªã')) {
                message += this.formatDeviceReport(report.data);
            } else if (report.title.includes('Trang ph·ªï bi·∫øn')) {
                message += this.formatPagesReport(report.data);
            } else if (report.title.includes('Chuy·ªÉn ƒë·ªïi theo ngu·ªìn')) {
                message += this.formatConversionsReport(report.data);
            } else if (report.title.includes('So s√°nh l∆∞u l∆∞·ª£ng')) {
                message += this.formatComparisonReport(report.data);
            }

            message += '\n';
        }

        return message;
    }

    /**
     * ƒê·ªãnh d·∫°ng b√°o c√°o ng∆∞·ªùi d√πng theo qu·ªëc gia
     */
    private formatCountryReport(data: any): string {
        let result = '';
        let total = 0;

        for (const item of data.data.slice(0, 5)) {
            total += parseInt(item.totalUsers);
            result += `- ${item.country}: ${item.totalUsers} ng∆∞·ªùi d√πng (${item.sessions} phi√™n)\n`;
        }

        if (data.data.length > 5) {
            result += `- <i>... v√† ${data.data.length - 5} qu·ªëc gia kh√°c</i>\n`;
        }

        result += `<b>T·ªïng: ${total} ng∆∞·ªùi d√πng</b>\n`;
        return result;
    }

    /**
     * ƒê·ªãnh d·∫°ng b√°o c√°o phi√™n theo thi·∫øt b·ªã
     */
    private formatDeviceReport(data: any): string {
        let result = '';
        let total = 0;

        for (const item of data.data) {
            const sessions = parseInt(item.totalUsers);
            total += sessions;
            result += `- ${item.country}: ${sessions} phi√™n\n`;
        }

        result += `<b>T·ªïng: ${total} phi√™n</b>\n`;
        return result;
    }

    /**
     * ƒê·ªãnh d·∫°ng b√°o c√°o trang ph·ªï bi·∫øn
     */
    private formatPagesReport(data: any): string {
        let result = '';

        for (const item of data.data.slice(0, 5)) {
            const pagePath = item.country.length > 30
                ? item.country.substring(0, 27) + '...'
                : item.country;
            const views = parseInt(item.totalUsers);
            const duration = (parseInt(item.newUsers) / 1000).toFixed(1);

            result += `- ${pagePath}: ${views} l∆∞·ª£t xem (${duration}s)\n`;
        }

        if (data.data.length > 5) {
            result += `- <i>... v√† ${data.data.length - 5} trang kh√°c</i>\n`;
        }

        return result;
    }

    /**
     * ƒê·ªãnh d·∫°ng b√°o c√°o chuy·ªÉn ƒë·ªïi theo ngu·ªìn
     */
    private formatConversionsReport(data: any): string {
        let result = '';

        for (const item of data.data.slice(0, 5)) {
            const source = item.country.length > 25
                ? item.country.substring(0, 22) + '...'
                : item.country;
            result += `- ${source}: ${item.totalUsers} chuy·ªÉn ƒë·ªïi\n`;
        }

        if (data.data.length > 5) {
            result += `- <i>... v√† ${data.data.length - 5} ngu·ªìn kh√°c</i>\n`;
        }

        return result;
    }

    /**
     * ƒê·ªãnh d·∫°ng b√°o c√°o so s√°nh l∆∞u l∆∞·ª£ng
     */
    private formatComparisonReport(data: any): string {
        if (data.data.length < 2) return '- Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ so s√°nh\n';

        const today = parseInt(data.data[0].totalUsers);
        const yesterday = parseInt(data.data[1].totalUsers);

        let change = 0;
        let changeText = '';

        if (yesterday > 0) {
            change = ((today - yesterday) / yesterday) * 100;
            const changeSymbol = change >= 0 ? '‚ñ≤' : '‚ñº';
            changeText = ` (${changeSymbol} ${Math.abs(change).toFixed(1)}%)`;
        }

        return `- H√¥m nay: ${today} phi√™n\n- H√¥m qua: ${yesterday} phi√™n${changeText}\n`;
    }

    /**
     * Ki·ªÉm tra k·∫øt n·ªëi GA v√† Telegram
     */
    async testConnection(): Promise<boolean> {
        try {
            // Ki·ªÉm tra k·∫øt n·ªëi Telegram
            const telegramOk = await this.telegramService.testConnection();
            if (!telegramOk) {
                logger.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Telegram');
                return false;
            }

            // Ki·ªÉm tra k·∫øt n·ªëi GA b·∫±ng c√°ch l·∫•y d·ªØ li·ªáu ƒë∆°n gi·∫£n
            const gaData = await this.ga4Service.compareTodayVsYesterday('sessions');
            if (!gaData) {
                logger.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Google Analytics');
                return false;
            }

            // G·ª≠i tin nh·∫Øn ki·ªÉm tra
            await this.telegramService.sendMessage('‚úÖ K·∫øt n·ªëi GA Insights ƒë√£ ho·∫°t ƒë·ªông!');
            return true;
        } catch (error) {
            logger.error('L·ªói khi ki·ªÉm tra k·∫øt n·ªëi:', error);
            return false;
        }
    }
}

// Ki·ªÉm tra service n·∫øu file ƒë∆∞·ª£c ch·∫°y tr·ª±c ti·∫øp
if (require.main === module) {
    const gaInsights = new GAInsightsService();
    gaInsights.sendDailyGAInsights().then(result => {
        console.log('K·∫øt qu·∫£ g·ª≠i b√°o c√°o:', result ? 'th√†nh c√¥ng' : 'th·∫•t b·∫°i');
        process.exit(0);
    }).catch(err => {
        console.error('L·ªói khi ch·∫°y service:', err);
        process.exit(1);
    });
} 